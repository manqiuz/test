Input {
  peers(Node,Node),
  prepare(Node, Int, Node)
}

Invented {
  propose(Node, Int, Update, Node),
  accept(Node,Int,Update,Node),
  promise(Node,Int,Node),
  promisecnt(Node,Int,Int),
  acceptcnt(Node, Int),
  totalcnt(Node,Int),
  maxview(Node, Int),
  AggMax(Int, Int),
  AggCountPeer(Int, Node),
  AggCountPromise(Int, Node),
  AggCountAcc(Int, Node)
}

Output {
  quorum(Node,Int),
  commit(Node, Int, Update)
}

Aggregate {
  AggMax(Int, Int),
  AggCountPeer(Int, Node),
  AggCountPromise(Int, Node),
  AggCountAcc(Int, Node)
}

Functor {
  fDiv(Int, Int, Int)
    }
Filter {
  fGt(Int, Int),
  fGE(Int, Int)
}

Constants {
  Update {msg, none}
}

Examples {
EDB {
  peers(a,b),
  peers(a,c),
  peers(a,d),
  peers(b,a),
  peers(b,c),
  peers(b,d),
  peers(c,a),
  peers(c,b),
  peers(c,d),
  peers(d,a),
  peers(d,b),
  peers(d,c),
  prepare(a, 2, b),
  prepare(a, 3, c),
  prepare(a, 4, d),
  prepare(b, 1, a),
  prepare(b, 3, c),
  prepare(b, 4, d),
  prepare(c, 1, a),
  prepare(c, 2, b),
  prepare(c, 4, d),
  prepare(d, 1, a),
  prepare(d, 2, b),
  prepare(d, 3, c)
}
IDB {
  quorum(d,4),
  commit(d,4,msg)
}
}



Rules {
}

Oracle {
  totalcnt(Node, Count) :- peers(Node,Peer), AggCountPeer(Count, Peer).

  maxview(Acceptor, MaxView) :- prepare(Acceptor, View, Sender), AggMax(MaxView, View).

  promise(Sender, View, Acceptor) :- maxview(Acceptor, View), prepare(Acceptor, View, Sender).

  promisecnt(Peer,View,Count) :- promise(Peer,View,Node), AggCountPromise(Count, Peer).

  quorum(Master,View) :- promisecnt(Master,View,NumOfPromise), totalcnt(Master,NumOfNodes), fDiv(half,NumOfNodes,2), fGt(NumOfPromise,half).

  propose(Peer, View, "msg", Master) :- peers(Master,Peer), quorum(Master,View).

  accept(Master,View,Update,Peer) :- propose(Peer, View, Update, Master), maxview(Peer,MaxView), fGE(View, MaxView).

  acceptcnt(Master,Count) :- accept(Master,View,Update,Peer), AggCountAcc(Count, Peer).

  commit(Master, View, Update) :-  acceptcnt(Master, NumOfAcc), accept(Master,View,Update,Peer), totalcnt(Master,NumOfNodes), quorum(Master,View), fDiv(half,NumOfNodes,2), fGt(NumOfAcc,half).
}


